import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.filters import Command, CommandStart, StateFilter
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.client.default import DefaultBotProperties
from datetime import datetime
import config
from keyboards import *
from google_sheets import GoogleSheets
from payments import PaymentManager
from database import Database
from reminders import ReminderSystem

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
storage = MemoryStorage()
bot = Bot(token=config.BOT_TOKEN, default=DefaultBotProperties(parse_mode='HTML'))
dp = Dispatcher(storage=storage)
db = Database()

try:
    gsheets = GoogleSheets()
    if not gsheets.is_connected():
        logger.warning("Google Sheets –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, —Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Å –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets: {e}")
    gsheets = None

payment_manager = PaymentManager()
reminder_system = ReminderSystem(gsheets)


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class BookingState(StatesGroup):
    waiting_for_support = State()
    waiting_for_delivery = State()
    admin_support_reply = State()
    project_completed = State()


# üìç –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´

@dp.message(CommandStart())
async def cmd_start(message: Message):
    welcome_text = """
–ü—Ä–∏–≤–µ—Ç! –Ø –ê–π–≤–∏. –ß–µ—Ä–µ–∑ –º–µ–Ω—è –ø—Ä–æ—Ö–æ–¥–∏—Ç 99% –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏.

–í–∞–º –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–∞–±–æ—á–∏–π —Å–∞–π—Ç –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–µ–∫–ª–∞–º—É –≤ –Ø–Ω–¥–µ–∫—Å–µ? –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å 5-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º –≤ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–µ –∏ –¥–∏–∑–∞–π–Ω–µ —Å–¥–µ–ª–∞–µ—Ç —ç—Ç–æ –¥–ª—è –í–∞—Å –∑–∞ 1 –¥–µ–Ω—å! –ë–µ–∑ –¥–æ–ª–≥–∏–≤ –ø–µ—Ä–µ–ø–∏—Å–æ–∫, –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤ –∏ –æ–∂–∏–¥–∞–Ω–∏–π.

–° —á–µ–≥–æ –Ω–∞—á–Ω—ë–º?
    """

    await message.answer(welcome_text, reply_markup=get_main_keyboard())


@dp.message(F.text == "üóìÔ∏è –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–µ–Ω—å")
async def book_day(message: Message):
    info_text = """
üìÖ <b>–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–Ω—è</b>

–Ø —Ä–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ –ø–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞–º, —Å—Ä–µ–¥–∞–º –∏ –ø—è—Ç–Ω–∏—Ü–∞–º. 
–í –Ω–µ–¥–µ–ª—é –¥–æ—Å—Ç—É–ø–Ω–æ –≤—Å–µ–≥–æ 3 —Ä–∞–±–æ—á–∏—Ö –¥–Ω—è ‚Äî –±—Ä–æ–Ω–∏—Ä—É–π—Ç–µ –∑–∞—Ä–∞–Ω–µ–µ!

–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç:
    """

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã –∏–∑ –æ–±–æ–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    booked_dates = []
    if gsheets:
        booked_dates = gsheets.get_booked_dates()

    # –¢–∞–∫–∂–µ –ø–æ–ª—É—á–∞–µ–º –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã
    from database import Database
    db = Database()

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–æ–π
    all_bookings = db.conn.cursor().execute('''
        SELECT booking_date FROM bookings 
        WHERE deposit_paid = TRUE AND status = 'active'
    ''').fetchall()

    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—ã –∏–∑ –±–∞–∑—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY
    for booking in all_bookings:
        date_obj = datetime.strptime(booking[0], "%Y-%m-%d")
        booked_dates.append(date_obj.strftime("%d.%m.%Y"))

    await message.answer(info_text, reply_markup=get_months_keyboard())


@dp.message(F.text == "‚ùì –ö–∞–∫ –≤—Å—ë –ø—Ä–æ—Ö–æ–¥–∏—Ç?")
async def how_it_works(message: Message):
    text = """
–ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ—Å—Ç–æ–π –∏ –±—ã—Å—Ç—Ä—ã–π üëá

1Ô∏è‚É£ –í—ã –±—Ä–æ–Ω–∏—Ä—É–µ—Ç–µ –¥–µ–Ω—å –∏ –≤–Ω–æ—Å–∏—Ç–µ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É (4 000 ‚ÇΩ)
2Ô∏è‚É£ –ó–∞–ø–æ–ª–Ω—è–µ—Ç–µ –±—Ä–∏—Ñ (–µ—Å–ª–∏ —á–µ–≥–æ-—Ç–æ –Ω–µ—Ç, —Å–æ–∑–¥–∞–¥–∏–º —Å–∞–º–∏, –ø–æ—Ç–æ–º —Å–º–æ–∂–µ—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å.)
3Ô∏è‚É£ –í –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ä–∞–±–æ—Ç–∞.
4Ô∏è‚É£ –í—ã –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç–µ –æ—Å—Ç–∞–≤—à—É—é—Å—è —Å—É–º–º—É (11 000 ‚ÇΩ)
5Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∞–º –≤–µ—Å—å –ø—Ä–æ–µ–∫—Ç + –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–æ 8 –≤–µ—á–µ—Ä–∞ –ø–æ –ú–°–ö

–í–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å ‚Äî 1 –¥–µ–Ω—å. –ë–µ–∑ –æ–∂–∏–¥–∞–Ω–∏–π –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–µ–π.

<b>–ù–û! –ï—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∞–≤–∏–ª:</b>

- –µ—Å–ª–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –ª—é–±—ã–º –ø—Ä–∏—á–∏–Ω–∞–º –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª –ø—Ä–æ–µ–∫—Ç –≤–æ–≤—Ä–µ–º—è ‚Äî –≤—Å—è —Å—É–º–º–∞ –≤ –ø–æ–ª–Ω–æ–º —Ä–∞–∑–º–µ—Ä–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫–ª–∏–µ–Ω—Ç—É –≤ –±–ª–∏–∂–∞—à–∏–µ 12 —á–∞—Å–æ–≤.

- –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ –∑–∞–ø–æ–ª–Ω–∏–ª –±—Ä–∏—Ñ –¥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –¥–Ω—è ‚Äî –ø—Ä–æ–µ–∫—Ç –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è, –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è.

- –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ –æ–ø–ª–∞—Ç–∏–ª –≤—Ç–æ—Ä—É—é —á–∞—Å—Ç—å —Å—É–º–º—ã –≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –¥–µ–Ω—å ‚Äî –ø—Ä–æ–µ–∫—Ç –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è, –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è.
    """
    await message.answer(text)


@dp.message(F.text == "üí∞ –£—Å–ª—É–≥–∏/–æ–ø–ª–∞—Ç–∞")
async def services_payment(message: Message):
    text = """
<b>–í –ø—Ä–æ–µ–∫—Ç –≤—Ö–æ–¥–∏—Ç:</b>

1Ô∏è‚É£ –°–±–æ—Ä –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ (–¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è seo-—Ç–µ–∫—Å—Ç–æ–≤ –∏ —Ä–µ–∫–ª–∞–º—ã –≤ –Ø–Ω–¥–µ–∫—Å–µ)
2Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –ª–µ–Ω–¥–∏–Ω–≥–∞ (–æ–¥–Ω–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–≥–æ —Å–∞–π—Ç–∞). –°–∞–π—Ç –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω –ø–æ–¥ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π —ç–∫—Ä–∞–Ω–∞. 
3Ô∏è‚É£ –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Å–∞–π—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–æ–≤–æ–π –≤—ã–¥–∞—á–∏ + –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏/ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ñ–æ—Ä–º –∑–∞—è–≤–æ–∫
4Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ 2-3 —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–∏ –≤ –Ø–Ω–¥–µ–∫—Å.–î–∏—Ä–µ–∫—Ç. –ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º.
5Ô∏è‚É£ –ù–∞–ø–∏—Å–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –≤ —Ä–µ–∫–ª–∞–º–µ, –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ –Ω–∞ —Å–∞–π—Ç–µ –∏ –¥—Ä—É–≥–æ–µ

–ü–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ —Ä–µ–∫–ª–∞–º–∞ –Ω–∞—á–Ω—ë—Ç —Ä–∞–±–æ—Ç–∞—Ç—å, —Å–∞–π—Ç –±—É–¥–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤ –∫ –ø—Ä–∏—ë–º—É –∑–∞—è–≤–æ–∫, –∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ ‚Äî —Å–æ–±–∏—Ä–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –ù–∏–∫–∞–∫–∏—Ö –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –Ω–µ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è.

<b>–í–ê–ñ–ù–û!</b> –†–µ–∫–ª–∞–º–∞ —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è. –î–∞, –º—ã —Å–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é —Ä–µ–∫–ª–∞–º—É –∏ –ø–æ–¥–∫–ª—é—á–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É. –ù–æ –¥–∞–ª–µ–µ –≤—ã –º–æ–∂–µ—Ç–µ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥—É. –ë–µ–∑ –¥–æ–ª–∂–Ω–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è —Ä–µ–∫–ª–∞–º–∞ –±—É–¥–µ—Ç –Ω–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –∏ –≤—ã –±—É–¥–µ—Ç–µ —Å–ª–∏–≤–∞—Ç—å –±–æ–ª—å—à–æ–π –±—é–¥–∂–µ—Ç –≤–Ω–∏–∫—É–¥–∞. 

üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–∞–Ω–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞ ‚Äî 15 000 ‚ÇΩ</b>

–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ 4 000 ‚ÇΩ ‚Äî —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –≤—ã–¥–µ–ª–∏–ª –¥–µ–Ω—å –Ω–∞ –≤–∞—à –ø—Ä–æ–µ–∫—Ç.

–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø–æ—è–≤–∏—Ç—Å—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –±—Ä–∏—Ñ –∏ –∑–∞–∫—Ä–µ–ø–∏—Ç—Å—è –¥–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
    """
    await message.answer(text)


@dp.message(F.text == "üìä –ü—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç")
async def examples(message: Message):
    text = """
–ù–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–µ–∫—Ç–æ–≤, –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –ê–π–≤–∏ üëá

- https://example-site1.com
- https://example-site2.com  
- https://example-site3.com

–ù–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–∏–º–µ—Ä—ã —Ä–µ–∫–ª–∞–º—ã" –≤—ã —É–≤–∏–¥–∏—Ç–µ —Ä–µ–∫–ª–∞–º–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è —ç—Ç–∏—Ö –∂–µ –ø—Ä–æ–µ–∫—Ç–æ–≤.
    """
    await message.answer(text, reply_markup=get_examples_keyboard())


@dp.message(F.text == "üë®‚Äçüíº –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ –ø—Ä–æ–µ–∫—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = message.from_user.id
    cursor = db.conn.cursor()
    cursor.execute('''
        SELECT status FROM bookings 
        WHERE user_id = ? AND status = 'completed'
        ORDER BY created_at DESC LIMIT 1
    ''', (user_id,))

    completed_project = cursor.fetchone()

    if completed_project:
        text = """
üí¨ <b>–°–≤—è–∑—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π</b>

–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –Ω–∏–∂–µ, –∏ —è –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É. –û–Ω –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.

<i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ.</i>
        """
    else:
        text = """
üí¨ <b>–°–≤—è–∑—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π</b>

–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –Ω–∏–∂–µ, –∏ —è –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É. –û–Ω –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.

<i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ.</i>
        """

    await message.answer(text)
    await state.set_state(BookingState.waiting_for_support)


# üìç –ò–ù–õ–ê–ô–ù –ö–ù–û–ü–ö–ò

@dp.callback_query(F.data.startswith("month_"))
async def select_month(callback: CallbackQuery):
    month_key = callback.data.split("_")[1]

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã —Ç–æ–ª—å–∫–æ –∏–∑ Google Sheets
    booked_dates = []
    if gsheets:
        booked_dates = gsheets.get_booked_dates()

    # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.info(f"–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è {month_key}, –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã: {booked_dates}")

    await callback.message.edit_text(
        "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—É—é –¥–∞—Ç—É:",
        reply_markup=get_days_keyboard(month_key, booked_dates)
    )
    await callback.answer()

@dp.callback_query(F.data == "back_to_months")
async def back_to_months(callback: CallbackQuery):
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç:",
        reply_markup=get_months_keyboard()
    )
    await callback.answer()


@dp.callback_query(F.data == "occupied")
async def date_occupied(callback: CallbackQuery):
    await callback.answer("‚ùå –≠—Ç–∞ –¥–∞—Ç–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é.", show_alert=True)


@dp.callback_query(F.data.startswith("book_"))
async def select_date(callback: CallbackQuery):
    date_str = callback.data.split("_")[1]
    date_obj = datetime.strptime(date_str, "%Y-%m-%d")

    text = f"""
üìÖ <b>–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É:</b> {date_obj.strftime('%d.%m.%Y')}

–î–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–Ω–µ—Å—Ç–∏ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É <b>4 000 ‚ÇΩ</b>

–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã:
‚Ä¢ –î–∞—Ç–∞ –±—É–¥–µ—Ç –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∞ –∑–∞ –≤–∞–º–∏
‚Ä¢ –í—ã –ø–æ–ª—É—á–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –±—Ä–∏—Ñ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
‚Ä¢ –ú—ã –ø—Ä–∏—Å—Ç—É–ø–∏–º –∫ —Ä–∞–±–æ—Ç–µ –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å

–ù–∞–∂–º–∏—Ç–µ "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å 4000 ‚ÇΩ" —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ.
    """

    await callback.message.edit_text(
        text,
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç—ã, –±–µ–∑ –∫–Ω–æ–ø–∫–∏ "–Ø –æ–ø–ª–∞—Ç–∏–ª"
        reply_markup=get_payment_keyboard(config.DEPOSIT_AMOUNT, date_str, show_check_button=False)
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("pay_deposit_"))
async def process_deposit_payment(callback: CallbackQuery):
    date_str = callback.data.split("_")[2]
    date_obj = datetime.strptime(date_str, "%Y-%m-%d")

    # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
    payment = await payment_manager.create_payment(
        amount=config.DEPOSIT_AMOUNT,
        description=f"–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ –∑–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {date_str}",
        user_id=callback.from_user.id,
        booking_date=date_str
    )

    if payment:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
        db.add_booking(
            user_id=callback.from_user.id,
            username=callback.from_user.username,
            full_name=callback.from_user.full_name,
            booking_date=date_str
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ Google Sheets
        if gsheets:
            user_data = {
                'user_id': callback.from_user.id,
                'username': callback.from_user.username,
                'full_name': callback.from_user.full_name
            }
            gsheets.add_booking(user_data, date_obj, payment.id)

        # –†–ï–î–ê–ö–¢–ò–†–£–ï–ú —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_text(
            f"üí≥ <b>–û–ø–ª–∞—Ç–∞ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã</b>\n\n"
            f"–°—É–º–º–∞: {config.DEPOSIT_AMOUNT} ‚ÇΩ\n"
            f"–î–∞—Ç–∞ –±—Ä–æ–Ω–∏: {date_obj.strftime('%d.%m.%Y')}\n\n"
            f"–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n{payment.confirmation.confirmation_url}\n\n"
            f"<i>–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª'</i>",
            # –¢–µ–ø–µ—Ä—å –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–Ø –æ–ø–ª–∞—Ç–∏–ª"
            reply_markup=get_payment_keyboard(config.DEPOSIT_AMOUNT, date_str, show_check_button=True)
        )
    else:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    await callback.answer()


@dp.message(Command("project_status"))
async def check_project_status(message: Message):
    if message.from_user.id != config.ADMIN_ID:
        return

    try:
        parts = message.text.split()
        if len(parts) < 2:
            await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /project_status user_id")
            return

        user_id = int(parts[1])

        cursor = db.conn.cursor()
        cursor.execute('''
            SELECT booking_date, status, deposit_paid, final_paid, brief_completed
            FROM bookings WHERE user_id = ? ORDER BY created_at DESC LIMIT 1
        ''', (user_id,))

        project = cursor.fetchone()

        if project:
            status_text = {
                'active': '–ê–∫—Ç–∏–≤–Ω—ã–π',
                'completed': '–ó–∞–≤–µ—Ä—à–µ–Ω',
                'cancelled': '–û—Ç–º–µ–Ω–µ–Ω'
            }

            await message.answer(
                f"üìä <b>–°—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}</b>\n\n"
                f"üìÖ –î–∞—Ç–∞ –±—Ä–æ–Ω–∏: {project[0]}\n"
                f"üìã –°—Ç–∞—Ç—É—Å: {status_text.get(project[1], project[1])}\n"
                f"üí∞ –ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞: {'‚úÖ –û–ø–ª–∞—á–µ–Ω–∞' if project[2] else '‚ùå –ù–µ –æ–ø–ª–∞—á–µ–Ω–∞'}\n"
                f"üí∞ –§–∏–Ω–∞–ª—å–Ω–∞—è –æ–ø–ª–∞—Ç–∞: {'‚úÖ –û–ø–ª–∞—á–µ–Ω–∞' if project[3] else '‚ùå –ù–µ –æ–ø–ª–∞—á–µ–Ω–∞'}\n"
                f"üìù –ë—Ä–∏—Ñ: {'‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω' if project[4] else '‚ùå –ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω'}\n"
            )
        else:
            await message.answer("‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")


@dp.callback_query(F.data == "check_payment")
async def check_payment_status(callback: CallbackQuery):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –≤—Ä—É—á–Ω—É—é"""
    user_id = callback.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª '–Ø –æ–ø–ª–∞—Ç–∏–ª'")

    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    booking = db.get_user_active_booking(user_id)

    if booking:
        booking_date = booking[4]  # booking_date field (—Ñ–æ—Ä–º–∞—Ç: YYYY-MM-DD)
        booking_id = booking[0]  # id field
        payment_type = "deposit"  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–ª–∞—Ç–µ–∂–∞

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ –∏–ª–∏ —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –æ–ø–ª–∞—Ç–∞
        if callback.message.text and "–§–∏–Ω–∞–ª—å–Ω–∞—è –æ–ø–ª–∞—Ç–∞" in callback.message.text:
            payment_type = "final"
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –æ–ø–ª–∞—Ç—ã –≤ –±–∞–∑–µ
            cursor = db.conn.cursor()
            cursor.execute('''
                UPDATE bookings SET final_paid = TRUE 
                WHERE id = ? AND user_id = ?
            ''', (booking_id, user_id))
            db.conn.commit()
            logger.info(f"–§–∏–Ω–∞–ª—å–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î")

            # –û–±–Ω–æ–≤–ª—è–µ–º Google Sheets
            google_sheets_success = False
            if gsheets:
                try:
                    google_sheets_success = gsheets.update_booking_status(user_id, booking_date, "–ü–æ–ª–Ω–∞—è –æ–ø–ª–∞—Ç–∞")
                    logger.info(f"–°—Ç–∞—Ç—É—Å –≤ Google Sheets –æ–±–Ω–æ–≤–ª–µ–Ω: {google_sheets_success}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å Google Sheets: {e}")
                    google_sheets_success = False

            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.edit_text(
                f"‚úÖ <b>–§–∏–Ω–∞–ª—å–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</b>\n\n"
                f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É! –¢–µ–ø–µ—Ä—å –º—ã –º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–º –≥–æ—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç.\n\n"
                f"<i>–û–∂–∏–¥–∞–π—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è.</i>"
            )

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–æ–µ–∫—Ç–∞
            from keyboards import get_admin_delivery_keyboard
            await bot.send_message(
                config.ADMIN_ID,
                f"üéâ <b>–§–∏–Ω–∞–ª—å–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞!</b>\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {callback.from_user.full_name}\n"
                f"üì± @{callback.from_user.username}\n"
                f"üìÖ –î–∞—Ç–∞: {booking_date}\n"
                f"üí∞ –§–∏–Ω–∞–ª—å–Ω–∞—è –æ–ø–ª–∞—Ç–∞: {config.FINAL_AMOUNT} ‚ÇΩ\n\n"
                f"<i>–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É –≥–æ—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç.</i>",
                reply_markup=get_admin_delivery_keyboard(user_id, booking_date, is_final_paid=True)
            )


        else:
            # –≠—Ç–æ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ (—Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞)
            deposit_paid = booking[6]  # deposit_paid field
            logger.info(f"–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ: ID={booking_id}, –¥–∞—Ç–∞={booking_date}, deposit_paid={deposit_paid}")

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –≤ –±–∞–∑–µ
            cursor = db.conn.cursor()
            cursor.execute('''
                UPDATE bookings SET deposit_paid = TRUE 
                WHERE id = ? AND user_id = ?
            ''', (booking_id, user_id))
            db.conn.commit()
            logger.info(f"–°—Ç–∞—Ç—É—Å –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î")

            # –û–±–Ω–æ–≤–ª—è–µ–º Google Sheets
            google_sheets_success = False
            if gsheets:
                try:
                    google_sheets_success = gsheets.update_booking_status(user_id, booking_date, "–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞")
                    logger.info(f"–°—Ç–∞—Ç—É—Å –≤ Google Sheets –æ–±–Ω–æ–≤–ª–µ–Ω: {google_sheets_success}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å Google Sheets: {e}")
                    google_sheets_success = False

            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            success_message = "‚úÖ <b>–ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!</b>" if google_sheets_success else "‚ö†Ô∏è <b>–ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ!</b>"
            google_warning = "" if google_sheets_success else "\n\n<i>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π —Å Google –¢–∞–±–ª–∏—Ü–µ–π, –Ω–æ –≤–∞—à–∞ –±—Ä–æ–Ω—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.</i>"

            await callback.message.edit_text(
                f"{success_message}\n\n"
                f"–î–∞—Ç–∞ {booking_date} –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞ –∑–∞ –≤–∞–º–∏.\n\n"
                f"üìù <b>–¢–µ–ø–µ—Ä—å –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –±—Ä–∏—Ñ:</b>\n{config.BRIEF_FORM_URL}\n\n"
                f"<i>–í–∞–∂–Ω–æ: –±—Ä–∏—Ñ –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –¥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–π –¥–∞—Ç—ã.</i>"
                f"{google_warning}"
            )

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
            from keyboards import get_admin_delivery_keyboard
            await bot.send_message(
                config.ADMIN_ID,
                f"üéâ <b>–ù–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ!</b>\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {callback.from_user.full_name}\n"
                f"üì± @{callback.from_user.username}\n"
                f"üìÖ –î–∞—Ç–∞: {booking_date}\n"
                f"üí∞ –ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞: {config.DEPOSIT_AMOUNT} ‚ÇΩ",
                reply_markup=get_admin_delivery_keyboard(user_id, booking_date, is_final_paid=False)
            )

    else:
        logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        await callback.message.edit_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.")

    await callback.answer()


@dp.callback_query(F.data == "waiting_final_payment")
async def handle_waiting_payment(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏ –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–ª–∞—Ç—ã"""
    await callback.answer("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –æ–ø–ª–∞—Ç—ã –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞", show_alert=True)


@dp.callback_query(F.data == "cancel_payment")
async def cancel_booking(callback: CallbackQuery):
    """–û—Ç–º–µ–Ω—è–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    user_id = callback.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ–Ω–∏–ª –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")

    # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    bookings = db.get_user_bookings(user_id)
    if bookings:
        latest_booking = bookings[0]
        booking_date = latest_booking[4]

        # –£–¥–∞–ª—è–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑ –±–∞–∑—ã
        cursor = db.conn.cursor()
        cursor.execute('DELETE FROM bookings WHERE user_id = ? AND booking_date = ?',
                       (user_id, booking_date))
        db.conn.commit()

        logger.info(f"–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {booking_date} —É–¥–∞–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.edit_text(
        "‚ùå <b>–í–∞—à–∞ –±—Ä–æ–Ω—å –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n\n"
        "–ú–æ–∂–µ—Ç –±—ã—Ç—å, –≤—ã–±–µ—Ä–µ—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É?",
        reply_markup=get_months_keyboard()  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –≤—ã–±–æ—Ä—É –º–µ—Å—è—Ü–∞
    )
    await callback.answer()

@dp.callback_query(F.data == "pay_final")
async def process_final_payment(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –æ–ø–ª–∞—Ç—ã"""
    user_id = callback.from_user.id
    bookings = db.get_user_bookings(user_id)

    if bookings:
        latest_booking = bookings[0]
        booking_date = latest_booking[4]

        payment = await payment_manager.create_payment(
            amount=config.FINAL_AMOUNT,
            description=f"–§–∏–Ω–∞–ª—å–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –∑–∞ –ø—Ä–æ–µ–∫—Ç {booking_date}",
            user_id=user_id,
            booking_date=booking_date,
            is_final=True
        )

        if payment:
            # –†–ï–î–ê–ö–¢–ò–†–£–ï–ú —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.edit_text(
                f"üí≥ <b>–§–∏–Ω–∞–ª—å–Ω–∞—è –æ–ø–ª–∞—Ç–∞</b>\n\n"
                f"–°—É–º–º–∞: {config.FINAL_AMOUNT} ‚ÇΩ\n\n"
                f"–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n{payment.confirmation.confirmation_url}\n\n"
                f"<i>–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª'</i>",
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–Ø –æ–ø–ª–∞—Ç–∏–ª" –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –æ–ø–ª–∞—Ç—ã
                reply_markup=get_payment_keyboard(config.FINAL_AMOUNT, is_final=True, show_check_button=True)
            )
        else:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞.")
    else:
        await callback.message.edit_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.")

    await callback.answer()


@dp.callback_query(F.data == "show_ads")
async def show_ads_examples(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–º–µ—Ä—ã —Ä–µ–∫–ª–∞–º—ã"""
    try:
        media_group = []
        for i, photo_path in enumerate(config.EXAMPLES['ads']):
            try:
                photo = FSInputFile(photo_path)
                media_group.append(types.InputMediaPhoto(
                    media=photo,
                    caption="–ü—Ä–∏–º–µ—Ä —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è" if i == 0 else ""
                ))
            except FileNotFoundError:
                logger.warning(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {photo_path}")

        if media_group:
            await callback.message.answer_media_group(media_group)
        else:
            await callback.message.answer("‚ùå –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø—Ä–∏–º–µ—Ä–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–º–µ—Ä–æ–≤ —Ä–µ–∫–ª–∞–º—ã.")

    await callback.answer()


@dp.callback_query(F.data == "cancel_payment")
async def cancel_booking(callback: CallbackQuery):
    """–û—Ç–º–µ–Ω—è–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    user_id = callback.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ–Ω–∏–ª –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")

    # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    bookings = db.get_user_bookings(user_id)
    if bookings:
        latest_booking = bookings[0]
        booking_date = latest_booking[4]

        # –£–¥–∞–ª—è–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑ –±–∞–∑—ã
        cursor = db.conn.cursor()
        cursor.execute('DELETE FROM bookings WHERE user_id = ? AND booking_date = ?',
                       (user_id, booking_date))
        db.conn.commit()

        logger.info(f"–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {booking_date} —É–¥–∞–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.edit_text(
        "‚ùå <b>–í–∞—à–∞ –±—Ä–æ–Ω—å –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n\n"
        "–ú–æ–∂–µ—Ç –±—ã—Ç—å, –≤—ã–±–µ—Ä–µ—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É?",
        reply_markup=get_months_keyboard()  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –≤—ã–±–æ—Ä—É –º–µ—Å—è—Ü–∞
    )
    await callback.answer()


@dp.callback_query(F.data.startswith("deliver_"))
async def deliver_project(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ –∫–ª–∏–µ–Ω—Ç—É"""
    parts = callback.data.split("_")
    user_id = int(parts[1])
    booking_date = parts[2]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–ø–ª–∞—á–µ–Ω–∞ –ª–∏ —Ñ–∏–Ω–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å
    cursor = db.conn.cursor()
    cursor.execute('''
        SELECT final_paid FROM bookings 
        WHERE user_id = ? AND booking_date = ?
    ''', (user_id, booking_date))

    result = cursor.fetchone()

    if not result or not result[0]:
        await callback.answer("‚ùå –§–∏–Ω–∞–ª—å–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –µ—â–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞!", show_alert=True)
        return

    await state.update_data(
        target_user_id=user_id,
        booking_date=booking_date,
        delivered_parts=0,  # –°—á–µ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —á–∞—Å—Ç–µ–π
        total_parts=4  # –í—Å–µ–≥–æ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å 4 —á–∞—Å—Ç–∏
    )

    await callback.message.answer(
        f"üì§ <b>–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –∫–ª–∏–µ–Ω—Ç—É</b>\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n"
        f"üìÖ –î–∞—Ç–∞: {booking_date}\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ –ø–æ—Ä—è–¥–∫—É:\n"
        f"1. –°—Å—ã–ª–∫—É –Ω–∞ –≥–æ—Ç–æ–≤—ã–π —Å–∞–π—Ç\n"
        f"2. –§–æ—Ç–æ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π (–¥–æ 3 —à—Ç)\n"
        f"3. –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—é (—Ç–µ–∫—Å—Ç –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç)\n"
        f"4. –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞\n\n"
        f"<i>–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ –æ–¥–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é.</i>\n"
        f"<b>–ü—Ä–æ–≥—Ä–µ—Å—Å: 0/4</b>"
    )

    await state.set_state(BookingState.waiting_for_delivery)
    await callback.answer()


# üìç –ü–û–î–î–ï–†–ñ–ö–ê

@dp.message(BookingState.waiting_for_support)
async def handle_support_message(message: Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    await state.update_data(support_user_id=message.from_user.id)

    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–≤–µ—Ç–∞
    support_text = f"""
üí¨ <b>–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞</b>

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {message.from_user.full_name}
üì± <b>Username:</b> @{message.from_user.username}
üÜî <b>ID:</b> {message.from_user.id}

<b>–í–æ–ø—Ä–æ—Å:</b>
{message.text}
    """

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    reply_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_support_{message.from_user.id}")]
    ])

    await bot.send_message(config.ADMIN_ID, support_text, reply_markup=reply_keyboard)
    await message.answer("‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É. –û—Ç–≤–µ—Ç–∏–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!")

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await message.answer("–ß–µ–º –µ—â—ë –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=get_main_keyboard())
    await state.clear()


# üìç –û–¢–í–ï–¢–´ –ê–î–ú–ò–ù–ê –ù–ê –í–û–ü–†–û–°–´ –ü–û–î–î–ï–†–ñ–ö–ò

@dp.callback_query(F.data.startswith("reply_support_"))
async def start_support_reply(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    user_id = int(callback.data.split("_")[2])

    await state.update_data(support_target_user_id=user_id)
    await callback.message.answer(
        f"üí¨ <b>–û—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É</b>\n\n"
        f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}\n\n"
        f"–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:"
    )

    await state.set_state(BookingState.admin_support_reply)
    await callback.answer()


@dp.message(BookingState.admin_support_reply)
async def handle_support_reply(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–ª–∏–µ–Ω—Ç—É"""
    data = await state.get_data()
    user_id = data.get('support_target_user_id')

    if not user_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –æ—Ç–≤–µ—Ç–∞")
        await state.clear()
        return

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
        await bot.send_message(
            user_id,
            f"üí¨ <b>–û—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:</b>\n\n{message.text}\n\n"
            f"<i>–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º —Å–Ω–æ–≤–∞.</i>"
        )

        await message.answer("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É!")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—åÂèØËÉΩ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")

    await state.clear()


# üìç –û–ë–†–ê–ë–û–¢–ö–ê –î–û–°–¢–ê–í–ö–ò –ü–†–û–ï–ö–¢–ê

@dp.message(BookingState.waiting_for_delivery)
async def handle_project_delivery(message: Message, state: FSMContext):
    data = await state.get_data()
    target_user_id = data.get('target_user_id')
    booking_date = data.get('booking_date')
    delivered_parts = data.get('delivered_parts', 0)
    total_parts = data.get('total_parts', 4)

    if not target_user_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
        await state.clear()
        return

    try:
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —á–∞—Å—Ç–µ–π
        delivered_parts += 1
        await state.update_data(delivered_parts=delivered_parts)

        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
        if message.text:
            caption = ""
            if delivered_parts == 1:
                caption = "üåê <b>–°—Å—ã–ª–∫–∞ –Ω–∞ –≥–æ—Ç–æ–≤—ã–π —Å–∞–π—Ç</b>"
            elif delivered_parts == 2:
                caption = "üì± <b>–†–µ–∫–ª–∞–º–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è</b>"
            elif delivered_parts == 3:
                caption = "üìÑ <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Ä–∞–±–æ—Ç–µ</b>"
            elif delivered_parts == 4:
                caption = "üí¨ <b>–§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>"

            await bot.send_message(target_user_id, f"{caption}\n\n{message.text}")

        elif message.photo:
            await bot.send_photo(
                target_user_id,
                message.photo[-1].file_id,
                caption="üì± <b>–†–µ–∫–ª–∞–º–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ</b>"
            )
        elif message.document:
            await bot.send_document(
                target_user_id,
                message.document.file_id,
                caption="üìÑ <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Ä–∞–±–æ—Ç–µ</b>"
            )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ —á–∞—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã
        if delivered_parts >= total_parts:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
            await bot.send_message(
                target_user_id,
                "üéâ <b>–ü—Ä–æ–µ–∫—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –¥–æ—Å—Ç–∞–≤–ª–µ–Ω!</b>\n\n"
                "–í—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã. –í–∞—à –ø—Ä–æ–µ–∫—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
                "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É —á–µ—Ä–µ–∑ –º–µ–Ω—é –±–æ—Ç–∞.\n\n"
                "<i>–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—à–∏ —É—Å–ª—É–≥–∏! üöÄ</i>"
            )

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
            await message.answer(
                "‚úÖ <b>–ü—Ä–æ–µ–∫—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É!</b>\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {target_user_id}\n"
                f"üìÖ –î–∞—Ç–∞: {booking_date}\n\n"
                "<i>–í—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã, –ø—Ä–æ–µ–∫—Ç –∑–∞–≤–µ—Ä—à–µ–Ω.</i>"
            )

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            cursor = db.conn.cursor()
            cursor.execute('''
                UPDATE bookings SET status = 'completed' 
                WHERE user_id = ? AND booking_date = ?
            ''', (target_user_id, booking_date))
            db.conn.commit()

            # –û–±–Ω–æ–≤–ª—è–µ–º Google Sheets
            if gsheets:
                gsheets.update_booking_status(target_user_id, booking_date, "–ü—Ä–æ–µ–∫—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")

            await state.clear()
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∞–¥–º–∏–Ω—É
            progress_text = f"‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª {delivered_parts}/{total_parts} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É!"
            if delivered_parts == 1:
                progress_text += "\n\n–û–∂–∏–¥–∞—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ–∫–ª–∞–º–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è..."
            elif delivered_parts == 2:
                progress_text += "\n\n–û–∂–∏–¥–∞—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é..."
            elif delivered_parts == 3:
                progress_text += "\n\n–û–∂–∏–¥–∞—é —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞..."

            await message.answer(progress_text)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞")

# üìç –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨

@dp.message(Command("admin"))
async def admin_panel(message: Message):
    if message.from_user.id != config.ADMIN_ID:
        return

    text = """
üë®‚Äçüíº <b>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</b>

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/bookings - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/remind - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
/project_status user_id - –°—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞

–¢–∞–∫–∂–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è—Ö.
    """
    await message.answer(text)


@dp.message(Command("remind"))
async def send_manual_reminders(message: Message):
    if message.from_user.id != config.ADMIN_ID:
        return

    await reminder_system.send_booking_reminders(bot)
    await message.answer("‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")


@dp.message(Command("refund"))
async def process_refund(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if message.from_user.id != config.ADMIN_ID:
        return

    try:
        parts = message.text.split()
        if len(parts) < 2:
            await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /refund payment_id [amount]")
            return

        payment_id = parts[1]
        amount = float(parts[2]) if len(parts) > 2 else None

        success = await PaymentManager.process_refund(payment_id, amount)
        if success:
            await message.answer("‚úÖ –í–æ–∑–≤—Ä–∞—Ç —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")


# üìç –ó–ê–ü–£–°–ö –ë–û–¢–ê

async def start_schedulers():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏"""
    asyncio.create_task(reminder_system.start_reminder_scheduler(bot))


async def main():
    logger.info("–ë–æ—Ç –ê–π–≤–∏ –∑–∞–ø—É—â–µ–Ω!")
    await start_schedulers()
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())