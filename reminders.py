import asyncio
from datetime import datetime, timedelta
import logging
from database import Database
import config

logger = logging.getLogger(__name__)
db = Database()


class ReminderSystem:
    def __init__(self, gsheets=None):  # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä gsheets
        self.gsheets = gsheets

    async def send_booking_reminders(self, bot):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è—Ö"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤–º–µ—Å—Ç–æ Google Sheets –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
            today_bookings = db.get_today_bookings()

            for booking in today_bookings:
                user_id = booking[1]  # user_id field from database
                booking_date = booking[4]  # booking_date field
                final_paid = booking[7]  # final_paid field

                try:
                    # –ï—Å–ª–∏ —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –µ—â–µ –Ω–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞
                    if not final_paid:
                        from keyboards import get_payment_keyboard
                        await bot.send_message(
                            user_id,
                            f"üîÑ <b>–í–∞—à –ø—Ä–æ–µ–∫—Ç –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!</b>\n\n"
                            f"–°–µ–≥–æ–¥–Ω—è ({booking_date}) –º—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –≤–∞—à–∏–º –ø—Ä–æ–µ–∫—Ç–æ–º. "
                            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤—à—É—é—Å—è —Å—É–º–º—É <b>11 000 ‚ÇΩ</b> –¥–æ 20:00 –ø–æ –ú–°–ö, "
                            f"—á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–º –≥–æ—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç.\n\n"
                            f"<i>–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:</i>\n"
                            f"‚Ä¢ –°—Å—ã–ª–∫—É –Ω–∞ –≥–æ—Ç–æ–≤—ã–π —Å–∞–π—Ç\n"
                            f"‚Ä¢ –†–µ–∫–ª–∞–º–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n"
                            f"‚Ä¢ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ —Ä–∞–±–æ—Ç–µ",
                            parse_mode="HTML",
                            reply_markup=get_payment_keyboard(config.FINAL_AMOUNT, is_final=True,
                                                              show_check_button=True)
                        )
                        logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –æ–ø–ª–∞—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                    else:
                        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª —Ñ–∏–Ω–∞–ª—å–Ω—É—é —á–∞—Å—Ç—å")

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è {len(today_bookings)} –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")

    async def start_reminder_scheduler(self, bot):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        while True:
            now = datetime.now()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
            if now.hour == config.REMINDER_HOUR and now.minute == 20:
                await self.send_booking_reminders(bot)
                # –ñ–¥–µ–º 1 –º–∏–Ω—É—Ç—É —á—Ç–æ–±—ã –Ω–µ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞
                await asyncio.sleep(60)

            await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É